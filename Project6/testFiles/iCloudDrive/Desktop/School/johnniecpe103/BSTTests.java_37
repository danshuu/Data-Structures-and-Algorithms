import org.junit.*;

import static org.junit.Assert.*;

import java.util.ArrayList;
public class BSTTests {
   
   @Test()
   public void emptyNode_insertContain01(){
      BST<Integer> bst = new BST<Integer>();
      bst.insert(1);
      assertTrue(bst.contains(1));
   }
   
   @Test()
   public void insertContain(){
      BST<Integer> bst = new BST<Integer>();
      bst.insert(1);
      assertTrue(bst.contains(1));
      bst.insert(2);
      assertTrue(bst.contains(2));
      bst.insert(3);
      assertTrue(bst.contains(3));
      bst.insert(4);
      assertTrue(bst.contains(4));
      bst.insert(5);
      assertTrue(bst.contains(5));
      bst.insert(6);
      assertTrue(bst.contains(6));
      bst.insert(7);
      assertTrue(bst.contains(7));
      assertFalse(bst.contains(9));
      assertEquals(7, bst.size());
   }
   
   @Test
   public void minMax(){
      BST<Integer> bst = new BST<Integer>();
      bst.insert(1);
      assertEquals((Integer)1, bst.minimum());
      bst.insert(9);
      assertEquals((Integer)9, bst.maximum());
      bst.insert(0);
      bst.insert(2);
      bst.insert(12);
      bst.insert(21);
      bst.insert(22);
      bst.insert(4040);
      bst.insert(12000000);
      bst.insert(-1);
      bst.insert(-2000000);
      bst.insert(-8);
      assertEquals((Integer)12000000, bst.maximum());
      assertEquals((Integer)(-2000000), bst.minimum());


   }
   @Test
   public void sortaList(){
      BST<Integer> bst = new BST<Integer>();
      ArrayList<Integer> ls = new ArrayList<Integer>();
      bst.insert(22);
      bst.insert(2);
      bst.insert(12);
      bst.insert(21);
      bst.insert(4040);
      bst.toSortedList(ls);
      assertEquals(5, ls.size());
      assertEquals((Integer)2, ls.get(0));
      assertEquals((Integer)4040, ls.get(ls.size()-1));
      Integer[] ex = {2,12,21,22,4040};
      verify(ls,ex);

   }
   
   private void verify(ArrayList<Integer> al, Integer[] expected) {
      for (int i = 0; i < expected.length; i++) {
         assertEquals(expected[i], al.get(i));
      }

   }

}
